#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdio_ext.h>

typedef struct _lista {
	int info;
	struct _lista * prox;
}TpLista;


void imprime(TpLista* l){
	TpLista* p;
	for(p = l; p != NULL; p = p->prox){
    printf("%d\n",p->info );
	}
}
/* função de inicialização */
TpLista* inicializa(){
	return NULL;
}

/* função de inserção no iníco da lista */
TpLista* insereini(TpLista* l, int e){
	TpLista* novo = (TpLista *) malloc(sizeof(TpLista));
	novo->info = e;
	novo->prox = l;
	return novo;

}

/* Inicializa e insere elementos no início da lista */


/* Protótipo das Funções */

TpLista* insereini(TpLista* l, int i);
TpLista* inicializa();



/* função para percorrer lista. Imprime os valores dos elementos */


/* função evazia: retorna 1 se vazia ou 0 se não vazia */

int evazia(TpLista* l){
	if(l == NULL){
		return 1;
	}else{
		return 0;
	}
}

/* função busca: retorna o ponteiro para o elemento ou NULL */

TpLista* busca(TpLista* l, int e){
	TpLista* p;
	for(p = l; p != NULL; p=p->prox){
		if(p->info == e){
			return p;
		}
	}
	return NULL; //O elemento não está na lista
}
/* função inclui: retorna o ponteiro para o elemento ou NULL */
TpLista * inclui(TpLista * l, int e){

TpLista* novo = (TpLista *) malloc(sizeof(TpLista));
    TpLista * anterior = NULL; // ponteiro para o elemento anterior
  	TpLista * p = l; // ponteiro para percorrer a lista

    	/* procura elemento na lista e guarda o anterior */
    	while(p != NULL && p->info < e){
    		anterior = p;
    		p = p->prox;
    	}

    	/* verifica se achou elemento */
    	if(p==NULL){
    		return l; // não achou o elemento, retorna a lista original
    	}

      novo->info = e;
      if(anterior->prox == NULL){
        anterior->prox = novo;
        novo->prox=NULL;
        return l;
      }
    novo->prox = anterior->prox;
    anterior->prox = novo;
    return l;

}

/* função exclui: retorna o ponteiro para o elemento ou NULL */

TpLista * exclui(TpLista * l, int e){
	TpLista * anterior = NULL; // ponteiro para o elemento anterior
	TpLista * p = l; // ponteiro para percorrer a lista

	/* procura elemento na lista e guarda o anterior */
	while(p != NULL && p->info != e){
		anterior = p;
		p = p->prox;
	}

	/* verifica se achou elemento */
	if(p == NULL){
		return l; // não achou o elemento, retorna a lista original
	}

  /* retira elemento */
	if(anterior == NULL){ // então retirar o primeiro elemento
		l = p->prox;
	}else{ // retira elemento do meio da lista
		anterior->prox = p->prox;
	}
	free(p);
	return l;
} // fim de Lista * exclui...


/* Função principal */
int main(){
	TpLista* l;	/* declara uma lista não inicializada */
	l = inicializa(); /* inicializa lista como vazia */
  l = insereini(l, 25);
  l = insereini(l, 10); /* insere o elemento 10 */
  l = inclui(l, 15);
   /* insere o elemento 25 */
  imprime(l);

return 0;
}
